# Generated by Django 3.2.19 on 2023-07-28 08:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('judge', '0147_auto_20230612_0623'),
        ('funix', '0006_auto_20230725_0903'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.TextField(verbose_name='Goals')),
                ('free', models.BooleanField(default=False, verbose_name='Is Free')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Course Name')),
                ('description', models.TextField(max_length=1000, verbose_name='Course Description')),
                ('certificate', models.CharField(max_length=225, verbose_name='Course Certificate')),
                ('og_image', models.CharField(blank=True, max_length=255, verbose_name='Og Image')),
                ('summary', models.TextField(blank=True, verbose_name='Course Summary')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField()),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='courses', to='judge.profile', verbose_name='Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Course Category')),
                ('slug', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CourseRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FunixProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courses', models.ManyToManyField(to='funix.Course')),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='funix', to='judge.profile', verbose_name='Funix Profile')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Course Category')),
                ('number', models.IntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='funix.course')),
            ],
            options={
                'unique_together': {('name', 'number', 'course')},
            },
        ),
        migrations.CreateModel(
            name='CourseProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_problems', to='judge.problem')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to='funix.coursesection')),
            ],
            options={
                'unique_together': {('problem', 'section', 'number')},
            },
        ),
    ]
